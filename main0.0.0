import json
from selenium import webdriver
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.keys import Keys
from time import sleep
from datetime import datetime
import datetime as dt
from random import randrange

def load_config():
    with open('files\config.json') as file:
        settings = json.load(file)
    return settings


def arrow_right(bot):
    actions = ActionChains(bot)
    actions.send_keys(Keys.ARROW_RIGHT)
    actions.perform()


def perform_like(bot):
    photo = bot.find_element_by_xpath("/html/body/div[6]/div[2]/div/article")
    action = webdriver.common.action_chains.ActionChains(bot)
    action.move_to_element_with_offset(photo, 50, 50)
    action.click()
    action.click()
    action.perform()



def perform_follow(bot):
    buttons = bot.find_elements_by_tag_name("button")
    buttons[2].click()
    headers_2 = bot.find_elements_by_tag_name("h2")
    line = "https://www.instagram.com/" + str(headers_2[2].text) + "/"
    file = open("files/to_follow.txt", 'a+')
    file.write(str(line) + "," + str(datetime.now()) + "\n")
    file.close()



def unfollow_user(bot, href):
    sleep(15)
    bot.get(href)
    sleep(10)
    following = bot.find_element_by_xpath(
        "/html/body/div[1]/section/main/div/header/section/div[1]/div[1]/div/div[2]/div/span/span[1]/button")
    following.click()
    sleep(5)
    confirmFollow = bot.find_element_by_xpath("/html/body/div[6]/div/div/div/div[3]/button[1]")
    confirmFollow.click()


def get_to_unfollow():
    current_date = datetime.now()
    follow_list = []
    unfollow_list = []
    failed = []
    file = open("files/to_follow.txt", "r+")
    lines = file.readlines()
    for line in lines:
        data = line.strip().split(',')
        if datetime.strptime(data[1], '%Y-%m-%d %H:%M:%S.%f') + dt.timedelta(days=2) < current_date:
            unfollow_list.append([datetime.strptime(data[1], '%Y-%m-%d %H:%M:%S.%f'), data[0]])
        else:
            follow_list.append([datetime.strptime(data[1], '%Y-%m-%d %H:%M:%S.%f'), data[0]])
    file.close()
    file = open("files/to_follow.txt", "w+")
    for line in follow_list:
        file.write(str(line[1]) + "," + str(line[0]) + "\n")
    file.close()
    for user in unfollow_list:
        try:
            unfollow_user(bot, user[1])
        except:
            failed.append(user)
    file = open("files/failed_unfollows.txt", "a+")
    for line in failed:
        print(str(line[1]) + "," + str(line[0]) + "\n")
    file.close()


def bot():
    settings = load_config()

    #Start and go to instagram
    bot = webdriver.Chrome('files\chromedriver.exe')
    sleep(2)
    bot.get('https://www.instagram.com/')
    sleep(2)
    accept_cookies = bot.find_element_by_xpath("/html/body/div[4]/div/div/button[1]")
    accept_cookies.click()
    sleep(4)
    #Login 
    username_input = bot.find_element_by_xpath(
        "/html/body/div[1]/section/main/article/div[2]/div[1]/div/form/div/div[1]/div/label/input")
    username_input.click()
    username_input.send_keys(settings['username'])

    password_input = bot.find_element_by_xpath(
        "/html/body/div[1]/section/main/article/div[2]/div[1]/div/form/div/div[2]/div/label/input")
    password_input.send_keys(settings['password'])

    login = bot.find_element_by_xpath("/html/body/div[1]/section/main/article/div[2]/div[1]/div/form/div/div[3]/button")
    login.click()
    sleep(6)
    #Ignore auto login and notification popups

    try:
        login_popup = bot.find_element_by_xpath("/html/body/div[1]/section/main/div/div/div/div/button")
        login_popup.click()
    except:
        pass
    sleep(2)
    try:
        notification_popup = bot.find_element_by_xpath("/html/body/div[5]/div/div/div/div[3]/button[2]")
        notification_popup.click()
    except:
        pass
    sleep(2)
    #Refrsh loop
    get_to_unfollow()
    while True:
        #Loop counters
        photo_interactions = 0
        #Go to hashtag & newest photo
        sleep(2)
        bot.get('https://www.instagram.com/explore/tags/' + settings['hashtag'] + '/')
        target = bot.find_element_by_xpath("/html/body/div[1]/section/main/article/h2")
        bot.execute_script("arguments[0].scrollIntoView();", target)
        actions = ActionChains(bot)
        actions.move_to_element_with_offset(target, 0, +150)
        actions.click()
        actions.perform()
        sleep(5)
        #photo count loop
        while photo_interactions <= 12:
            decision = randrange(100)
            if decision < settings['chance_of_like']:
                try:
                    perform_like(bot)
                except:
                    photo_interactions -= 1 
            elif decision >= settings['chance_of_like'] and decision< settings['chance_of_like'] + settings['chance_of_follow'] :
                try:
                    perform_follow(bot)
                except:
                    photo_interactions -= 1 
            else:
                pass
            photo_interactions += 1
            sleep(5)
            arrow_right(bot)
            sleep(settings['time_interval'])


def run():
    try:
        bot()
    except:
        sleep(30)
        run()

if _name_ == '_main_':
    run()
